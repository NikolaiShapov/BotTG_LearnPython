
# t.me/Learn_Python01_Mega_Bot
#from pprint import pprint
import logging
from datetime import datetime
import ephem
from telegram.ext import Updater, CommandHandler, MessageHandler ,Filters
import settings
import random

list_city =['Абаза', 'Абакан', 'Абдулино', 'Абинск', 'Агидель', 'Агрыз', 'Адыгейск', 'Азнакаево', 'Азов', 'Ак-Довурак', 'Аксай', 'Алагир', 'Алапаевск', 'Алатырь', 'Алдан', 'Алейск', 'Александров', 'Александровск', 'Александровск-Сахалинский', 'Алексеевка', 'Алексин', 'Алзамай', 'Альметьевск', 'Амурск', 'Анадырь', 'Анапа', 'Ангарск', 'Андреаполь', 'Анжеро-Судженск', 'Анива', 'Апатиты', 'Апрелевка', 'Апшеронск', 'Арамиль', 'Аргун', 'Ардатов', 'Ардон', 'Арзамас', 'Арзамас', 'Аркадак', 'Армавир', 'Арсеньев', 'Артём', 'Артёмовск', 'Артёмовский', 'Архангельск', 'Асбест', 'Асино', 'Астрахань', 'Аткарск', 'Ахтубинск', 'Ачинск', 'Аша', 'Бабаево', 'Бабушкин', 'Бавлы', 'Багратионовск', 'Байкальск', 'Баймак', 'Бакал', 'Баксан', 'Балабаново', 'Балаково', 'Балахна', 'Балахна', 'Балашиха', 'Балашов', 'Балей', 'Балтийск', 'Барабинск', 'Барнаул', 'Барыш', 'Батайск', 'Бежецк', 'Белая Калитва', 'Белая Холуница', 'Белгород', 'Белебей', 'Белёв', 'Белинский', 'Белово', 'Белогорск', 'Белозерск', 'Белокуриха', 'Беломорск', 'Белорецк', 'Белореченск', 'Белоусово', 'Белоярский', 'Белый', 'Бердск', 'Березники', 'Берёзовский', 'Берёзовский', 'Беслан', 'Бийск', 'Бикин', 'Билибино', 'Биробиджан', 'Бирск', 'Бирюсинск', 'Бирюч', 'Благовещенск', 'Благовещенск', 'Благодарный', 'Бобров', 'Богданович', 'Богородицк', 'Богородск', 'Богородск', 'Боготол', 'Богучар', 'Бодайбо', 'Бокситогорск', 'Болгар', 'Бологое', 'Болотное', 'Болохово', 'Болхов', 'Большой Камень', 'Бор', 'Бор', 'Борзя', 'Борисоглебск', 'Боровичи', 'Боровск', 'Бородино', 'Братск', 'Бронницы', 'Брянск', 'Бугульма', 'Бугуруслан', 'Будённовск', 'Бузулук', 'Буинск', 'Буй', 'Буйнакск', 'Бутурлиновка', 'Валдай', 'Валуйки', 'Велиж', 'Великие Луки', 'Великий Новгород', 'Великий Устюг', 'Вельск', 'Венёв', 'Верещагино', 'Верея', 'Верхнеуральск', 'Верхний Тагил', 'Верхний Уфалей', 'Верхняя Пышма', 'Верхняя Салда', 'Верхняя Тура', 'Верхотурье', 'Верхоянск', 'Весьегонск', 'Ветлуга', 'Ветлуга', 'Видное', 'Вилюйск', 'Вилючинск', 'Вихоревка', 'Вичуга', 'Владивосток', 'Владикавказ', 'Владимир', 'Волгоград', 'Волгодонск', 'Волгореченск', 'Волжск', 'Волжский', 'Вологда', 'Володарск', 'Володарск', 'Волоколамск', 'Волосово', 'Волхов', 'Волчанск', 'Вольск', 'Воркута', 'Воронеж', 'Ворсма', 'Ворсма', 'Воскресенск', 'Воткинск', 'Всеволожск', 'Вуктыл', 'Выборг', 'Выкса', 'Выкса', 'Высоковск', 'Высоцк', 'Вытегра', 'Вышний Волочёк', 'Вяземский', 'Вязники', 'Вязьма', 'Вятские Поляны', 'Гаврилов Посад', 'Гаврилов-Ям', 'Гагарин', 'Гаджиево', 'Гай', 'Галич', 'Гатчина', 'Гвардейск', 'Гдов', 'Геленджик', 'Георгиевск', 'Глазов', 'Горбатов', 'Горбатов', 'Горно-Алтайск', 'Горнозаводск', 'Горнозаводск', 'Горняк', 'Городец', 'Городец', 'Городище', 'Городовиковск', 'Гороховец', 'Горячий Ключ', 'Грайворон', 'Гремячинск', 'Грозный', 'Грязи', 'Грязовец', 'Губаха', 'Губкин', 'Губкинский', 'Гудермес', 'Гуково', 'Гулькевичи', 'Гурьевск', 'Гурьевск', 'Гусев', 'Гусиноозёрск', 'Гусь-Хрустальный', 'Давлеканово', 'Дагестанские Огни', 'Далматово', 'Дальнегорск', 'Дальнереченск', 'Данилов', 'Данков', 'Дегтярск', 'Дедовск', 'Демидов', 'Дербент', 'Десногорск', 'Дзержинск', 'Дзержинск', 'Дзержинский', 'Дивногорск', 'Дигора', 'Димитровград', 'Дмитриев-Льговский', 'Дмитров', 'Дмитровск', 'Дно', 'Добрянка', 'Долгопрудный', 'Долинск', 'Домодедово', 'Донецк', 'Донской', 'Дорогобуж', 'Дрезна', 'Дубна', 'Дубовка', 'Дудинка', 'Духовщина', 'Дюртюли', 'Дятьково', 'Егорьевск', 'Ейск', 'Екатеринбург', 'Елабуга', 'Елец', 'Елизово', 'Ельня', 'Еманжелинск', 'Емва', 'Енисейск', 'Ермолино', 'Ершов', 'Ессентуки', 'Ефремов', 'Железноводск', 'Железногорск', 'Железногорск', 'Железногорск-Илимский', 'Железнодорожный', 'Жердевка', 'Жигулёвск', 'Жиздра', 'Жирновск', 'Жуков', 'Жуковка', 'Жуковский', 'Завитинск', 'Заводоуковск', 'Заволжск', 'Заволжье', 'Заволжье', 'Задонск', 'Заинск', 'Закаменск', 'Заозёрный', 'Заозёрск', 'Западная Двина', 'Заполярный', 'Зарайск', 'Заречный', 'Заречный', 'Заринск', 'Звенигово', 'Звенигород', 'Зверево', 'Зеленогорск', 'Зеленоградск', 'Зеленодольск', 'Зеленокумск', 'Зерноград', 'Зея', 'Зима', 'Златоуст', 'Злынка', 'Змеиногорск', 'Знаменск', 'Зубцов', 'Зуевка', 'Ивангород', 'Иваново', 'Ивантеевка', 'Ивдель', 'Игарка', 'Ижевск', 'Избербаш', 'Изобильный', 'Иланский', 'Инза', 'Инсар', 'Инта', 'Ипатово', 'Ирбит', 'Иркутск', 'Исилькуль', 'Искитим', 'Истра', 'Ишим', 'Ишимбай', 'Йошкар-Ола', 'Кадников', 'Казань', 'Калач', 'Калачинск', 'Калач-на-Дону', 'Калининград', 'Калининск', 'Калтан', 'Калуга', 'Калязин', 'Камбарка', 'Каменка', 'Каменногорск', 'Каменск-Уральский', 'Каменск-Шахтинский', 'Камень-на-Оби', 'Камешково', 'Камызяк', 'Камышин', 'Камышлов', 'Канаш', 'Кандалакша', 'Канск', 'Карабаново', 'Карабаш', 'Карабулак', 'Карасук', 'Карачаевск', 'Карачев', 'Каргат', 'Каргополь', 'Карпинск', 'Карталы', 'Касимов', 'Касли', 'Каспийск', 'Катав-Ивановск', 'Катайск', 'Качканар', 'Кашин', 'Кашира', 'Кедровый', 'Кемерово', 'Кемь', 'Кизел', 'Кизилюрт', 'Кизляр', 'Кимовск', 'Кимры', 'Кингисепп', 'Кинель', 'Кинешма', 'Киреевск', 'Киренск', 'Киржач', 'Кириллов', 'Кириши', 'Киров', 'Киров', 'Кировград', 'Кирово-Чепецк', 'Кировск', 'Кировск', 'Кирс', 'Кирсанов', 'Киселёвск', 'Кисловодск', 'Климовск', 'Клин', 'Клинцы', 'Княгинино', 'Княгинино', 'Ковдор', 'Ковров', 'Ковылкино', 'Когалым', 'Кодинск', 'Козельск', 'Козловка', 'Козьмодемьянск', 'Кола', 'Кологрив', 'Коломна', 'Колпашево', 'Кольчугино', 'Коммунар', 'Комсомольск', 'Комсомольск-на-Амуре', 'Конаково', 'Кондопога', 'Кондрово', 'Константиновск', 'Копейск', 'Кораблино', 'Кореновск', 'Коркино', 'Королёв', 'Короча', 'Корсаков', 'Коряжма', 'Костерево', 'Костомукша', 'Кострома', 'Котельниково', 'Котельнич', 'Котлас', 'Котово', 'Котовск', 'Кохма', 'Красавино', 'Красноармейск', 'Красноармейск', 'Красновишерск', 'Красногорск', 'Краснодар', 'Краснозаводск', 'Краснознаменск', 'Краснознаменск', 'Краснокаменск', 'Краснокамск', 'Краснослободск', 'Краснослободск', 'Краснотурьинск', 'Красноуральск', 'Красноуфимск', 'Красноярск', 'Красный Кут', 'Красный Сулин', 'Красный Холм', 'Кремёнки', 'Кропоткин', 'Крымск', 'Кстово', 'Кстово', 'Кувандык', 'Кувшиново', 'Кудымкар', 'Кузнецк', 'Куйбышев', 'Кулебаки', 'Кулебаки', 'Кумертау', 'Кунгур', 'Купино', 'Курган', 'Курганинск', 'Курильск', 'Курлово', 'Куровское', 'Курск', 'Куртамыш', 'Курчатов', 'Куса', 'Кушва', 'Кызыл', 'Кыштым', 'Кяхта', 'Лабинск', 'Лабытнанги', 'Лагань', 'Ладушкин', 'Лакинск', 'Лангепас', 'Лахденпохья', 'Лебедянь', 'Лениногорск', 'Ленинск', 'Ленинск-Кузнецкий', 'Ленск', 'Лермонтов', 'Лесной', 'Лесозаводск', 'Лесосибирск', 'Ливны', 'Ликино-Дулёво', 'Липецк', 'Липки', 'Лиски', 'Лихославль', 'Лобня', 'Лодейное Поле', 'Лосино-Петровский', 'Луга', 'Луза', 'Лукоянов', 'Лукоянов', 'Луховицы', 'Лысково', 'Лысково', 'Лысьва', 'Лыткарино', 'Льгов', 'Любань', 'Люберцы', 'Любим', 'Людиново', 'Лянтор', 'Магадан', 'Магас', 'Магнитогорск', 'Майкоп', 'Майский', 'Макаров', 'Макарьев', 'Макушино', 'Малая Вишера', 'Малгобек', 'Малмыж', 'Малоархангельск', 'Малоярославец', 'Мамадыш', 'Мамоново', 'Мантурово', 'Мариинск', 'Мариинский Посад', 'Маркс', 'Махачкала', 'Мглин', 'Мегион', 'Медвежьегорск', 'Медногорск', 'Медынь', 'Межгорье', 'Междуреченск', 'Мезень', 'Меленки', 'Мелеуз', 'Менделеевск', 'Мензелинск', 'Мещовск', 'Миасс', 'Микунь', 'Миллерово', 'Минеральные Воды', 'Минусинск', 'Миньяр', 'Мирный', 'Мирный', 'Михайлов', 'Михайловка', 'Михайловск', 'Михайловск', 'Мичуринск', 'Могоча', 'Можайск', 'Можга', 'Моздок', 'Мончегорск', 'Морозовск', 'Моршанск', 'Мосальск', 'Москва', 'Муравленко', 'Мураши', 'Мурманск', 'Муром', 'Мценск', 'Мыски', 'Мытищи', 'Мышкин', 'Набережные Челны', 'Навашино', 'Навашино', 'Наволоки', 'Надым', 'Назарово', 'Назрань', 'Называевск', 'Нальчик', 'Нариманов', 'Наро-Фоминск', 'Нарткала', 'Нарьян-Мар', 'Находка', 'Невель', 'Невельск', 'Невинномысск', 'Невьянск', 'Нелидово', 'Неман', 'Нерехта', 'Нерчинск', 'Нерюнгри', 'Нестеров', 'Нефтегорск', 'Нефтекамск', 'Нефтекумск', 'Нефтеюганск', 'Нея', 'Нижневартовск', 'Нижнекамск', 'Нижнеудинск', 'Нижние Серги', 'Нижний Ломов', 'Нижний Новгород', 'Нижний Новгород', 'Нижний Тагил', 'Нижняя Салда', 'Нижняя Тура', 'Николаевск', 'Николаевск-на-Амуре', 'Никольск', 'Никольск', 'Никольское', 'Новая Ладога', 'Новая Ляля', 'Новоалександровск', 'Новоалтайск', 'Новоаннинский', 'Нововоронеж', 'Новодвинск', 'Новозыбков', 'Новокубанск', 'Новокузнецк', 'Новокуйбышевск', 'Новомичуринск', 'Новомосковск', 'Новопавловск', 'Новоржев', 'Новороссийск', 'Новосибирск', 'Новосиль', 'Новосокольники', 'Новотроицк', 'Новоузенск', 'Новоульяновск', 'Новоуральск', 'Новохоперск', 'Новочебоксарск', 'Новочеркасск', 'Новошахтинск', 'Новый Оскол', 'Новый Уренгой', 'Ногинск', 'Нолинск', 'Норильск', 'Ноябрьск', 'Нурлат', 'Нытва', 'Нюрба', 'Нягань', 'Нязепетровск', 'Няндома', 'Облучье', 'Обнинск', 'Обоянь', 'Обь', 'Одинцово', 'Ожерелье', 'Озёрск', 'Озёрск', 'Озёры', 'Октябрьск', 'Октябрьский', 'Окуловка', 'Олёкминск', 'Оленегорск', 'Олонец', 'Омск', 'Омутнинск', 'Онега', 'Опочка', 'Орёл', 'Оренбург', 'Орехово-Зуево', 'Орлов', 'Орск', 'Оса', 'Осинники', 'Осташков', 'Остров', 'Островной', 'Острогожск', 'Отрадное', 'Отрадный', 'Оха', 'Оханск', 'Очёр', 'Павлово', 'Павлово', 'Павловск', 'Павловский Посад', 'Палласовка', 'Партизанск', 'Певек', 'Пенза', 'Первомайск', 'Первомайск', 'Первоуральск', 'Перевоз', 'Перевоз', 'Пересвет', 'Переславль-Залесский', 'Пермь', 'Пестово', 'Петров Вал', 'Петровск', 'Петровск-Забайкальский', 'Петрозаводск', 'Петропавловск-Камчатский', 'Петухово', 'Петушки', 'Печора', 'Печоры', 'Пикалёво', 'Пионерский', 'Питкяранта', 'Плавск', 'Пласт', 'Плёс', 'Поворино', 'Подольск', 'Подпорожье', 'Покачи', 'Покров', 'Покровск', 'Полевской', 'Полесск', 'Полысаево', 'Полярные Зори', 'Полярный', 'Поронайск', 'Порхов', 'Похвистнево', 'Почеп', 'Починок', 'Пошехонье', 'Правдинск', 'Приволжск', 'Приморск', 'Приморско-Ахтарск', 'Приозерск', 'Прокопьевск', 'Пролетарск', 'Протвино', 'Прохладный', 'Псков', 'Пугачёв', 'Пудож', 'Пустошка', 'Пучеж', 'Пушкино', 'Пущино', 'Пыталово', 'Пыть-Ях', 'Пятигорск', 'Радужный', 'Радужный', 'Райчихинск', 'Раменское', 'Рассказово', 'Ревда', 'Реж', 'Реутов', 'Ржев', 'Родники', 'Рославль', 'Россошь', 'Ростов Великий', 'Ростов-на-Дону', 'Рошаль', 'Ртищево', 'Рубцовск', 'Рудня', 'Руза', 'Рузаевка', 'Рыбинск', 'Рыбное', 'Рыльск', 'Ряжск', 'Рязань', 'Салават', 'Салаир', 'Салехард', 'Сальск', 'Самара', 'Санкт-Петербург', 'Саранск', 'Сарапул', 'Саратов', 'Саров', 'Саров', 'Сасово', 'Сатка', 'Сафоново', 'Саяногорск', 'Саянск', 'Светлогорск', 'Светлоград', 'Светлый', 'Светогорск', 'Свирск', 'Свободный', 'Себеж', 'Северобайкальск', 'Северодвинск', 'Северо-Курильск', 'Североморск', 'Североуральск', 'Северск', 'Севск', 'Сегежа', 'Сельцо', 'Семёнов', 'Семёнов', 'Семикаракорск', 'Семилуки', 'Сенгилей', 'Серафимович', 'Сергач', 'Сергач', 'Сергиев Посад', 'Сердобск', 'Серов', 'Серпухов', 'Сертолово', 'Сибай', 'Сим', 'Сковородино', 'Скопин', 'Славгород', 'Славск', 'Славянск-на-Кубани', 'Сланцы', 'Слободской', 'Слюдянка', 'Смоленск', 'Снежинск', 'Снежногорск', 'Собинка', 'Советск', 'Советск', 'Советск', 'Советская Гавань', 'Советский', 'Сокол', 'Солигалич', 'Соликамск', 'Солнечногорск', 'Сольвычегодск', 'Соль-Илецк', 'Сольцы', 'Сорочинск', 'Сорск', 'Сортавала', 'Сосенский', 'Сосновка', 'Сосновоборск', 'Сосновый Бор', 'Сосногорск', 'Сочи', 'Спас-Деменск', 'Спас-Клепики', 'Спасск', 'Спасск-Дальний', 'Спасск-Рязанский', 'Среднеколымск', 'Среднеуральск', 'Сретенск', 'Ставрополь', 'Старая Русса', 'Старица', 'Стародуб', 'Старый Оскол', 'Стерлитамак', 'Стрежевой', 'Строитель', 'Струнино', 'Ступино', 'Суворов', 'Суджа', 'Судогда', 'Суздаль', 'Суоярви', 'Сураж', 'Сургут', 'Суровикино', 'Сурск', 'Сусуман', 'Сухиничи', 'Сухой Лог', 'Сходня', 'Сызрань', 'Сыктывкар', 'Сысерть', 'Сычевка', 'Сясьстрой', 'Тавда', 'Таганрог', 'Тайга', 'Тайшет', 'Талдом', 'Талица', 'Тамбов', 'Тара', 'Таруса', 'Татарск', 'Таштагол', 'Тверь', 'Теберда', 'Тейково', 'Темников', 'Темрюк', 'Терек', 'Тетюши', 'Тимашевск', 'Тихвин', 'Тихорецк', 'Тобольск', 'Тогучин', 'Тольятти', 'Томари', 'Томмот', 'Томск', 'Топки', 'Торжок', 'Торопец', 'Тосно', 'Тотьма', 'Трехгорный', 'Троицк', 'Троицк', 'Трубчевск', 'Туапсе', 'Туймазы', 'Тула', 'Тулун', 'Туран', 'Туринск', 'Тутаев', 'Тында', 'Тырныауз', 'Тюкалинск', 'Тюмень', 'Уварово', 'Углегорск', 'Углич', 'Удачный', 'Удомля', 'Ужур', 'Узловая', 'Улан-Удэ', 'Ульяновск', 'Унеча', 'Урай', 'Урень', 'Урень', 'Уржум', 'Урус-Мартан', 'Урюпинск', 'Усинск', 'Усмань', 'Усолье', 'Усолье-Сибирское', 'Уссурийск', 'Усть-Джегута', 'Усть-Илимск', 'Усть-Катав', 'Усть-Кут', 'Усть-Лабинск', 'Устюжна', 'Уфа', 'Ухта', 'Учалы', 'Уяр', 'Фатеж', 'Фокино', 'Фокино', 'Фролово', 'Фрязино', 'Фурманов', 'Хабаровск', 'Хадыженск', 'Ханты-Мансийск', 'Харабали', 'Харовск', 'Хасавюрт', 'Хвалынск', 'Хилок', 'Химки', 'Холм', 'Холмск', 'Хотьково', 'Цивильск', 'Цимлянск', 'Чадан', 'Чайковский', 'Чапаевск', 'Чаплыгин', 'Чебаркуль', 'Чебоксары', 'Чегем', 'Чекалин', 'Челябинск', 'Чердынь', 'Черемхово', 'Черепаново', 'Череповец', 'Черкесск', 'Чёрмоз', 'Черноголовка', 'Черногорск', 'Чернушка', 'Черняховск', 'Чехов', 'Чистополь', 'Чита', 'Чкаловск', 'Чкаловск', 'Чудово', 'Чулым', 'Чусовой', 'Чухлома', 'Шагонар', 'Шадринск', 'Шали', 'Шарыпово', 'Шарья', 'Шатура', 'Шахтёрск', 'Шахты', 'Шахунья', 'Шахунья', 'Шацк', 'Шебекино', 'Шелехов', 'Шенкурск', 'Шилка', 'Шимановск', 'Шиханы', 'Шлиссельбург', 'Шумерля', 'Шумиха', 'Шуя', 'Щёкино', 'Щёлково', 'Щербинка', 'Щигры', 'Щучье', 'Электрогорск', 'Электросталь', 'Электроугли', 'Элиста', 'Энгельс', 'Эртиль', 'Юбилейный', 'Югорск', 'Южа', 'Южно-Сахалинск', 'Южно-Сухокумск', 'Южноуральск', 'Юрга', 'Юрьевец', 'Юрьев-Польский', 'Юрюзань', 'Юхнов', 'Ядрин', 'Якутск', 'Ялуторовск', 'Янаул', 'Яранск', 'Яровое', 'Ярославль', 'Ярцево', 'Ясногорск', 'Ясный', 'Яхрома']

logging.basicConfig(format='%(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO,
                    filename='bot.log',
                    encoding='utf-8') # логирование ошибок

# PROXY = {'proxy_url': settings.PROXY_URL,
#     'urllib3_proxy_kwargs': {'username': settings.PROXY_USERNAME, 'password': settings.PROXY_PASSWORD}}

def greet_user(update, context):
    print('Вызван /start')
    print(update)
    update.message.reply_text('Добро пожаловать в Learn_Python01_Mega_Bot!')

def talk_to_me(update, context):
    text = update.message.text
    print(text)
    update.message.reply_text(text)

def planet_in_the_constellation(update, context):
    logging.info('Вызвана команда /planet')
    user_command, planet, *_ = update.message.text.split()
    print(user_command, planet)
    planet_dict = {'Jupiter': ephem.Jupiter(datetime.today()),
            'Mars': ephem.Mars(datetime.today()),
            'Mercury': ephem.Mercury(datetime.today()),
            'Moon': ephem.Moon(datetime.today()),
            'Neptune': ephem.Neptune(datetime.today()),
            'Pluto': ephem.Pluto(datetime.today()),
            'Saturn': ephem.Saturn(datetime.today()),
            'Sun': ephem.Sun(datetime.today()),
            'Uranus': ephem.Uranus(datetime.today()),
            'Venus': ephem.Venus(datetime.today())}
    if planet_dict.get(planet):
        constellation = ephem.constellation(planet_dict.get(planet))
        update.message.reply_text(f'планета {planet} сегодня находится в созвездии - {constellation[-1]}')
    else: update.message.reply_text('Это не планета!')


def wordcount(update,context):
    '''
    Уровень 2
        Реализуйте в боте команду /wordcount которая считает слова в присланной фразе.
        Например на запрос /wordcount Привет как дела бот должен ответить: 3 слова.
        Не забудьте:
        Добавить проверки на пустую строку
        Как можно обмануть бота, какие еще проверки нужны?
    '''
    logging.info('Вызов команды /wordcount')
    text = update.message.text.split()[1:] #Добавить проверки на пустую строку - проверка нужна? в данно случае он выдас = 0
    count_word = len(text)
    # Как можно обмануть бота, какие еще проверки нужны? НАПРИМЕР: Привет как дела ? знак "?" посчитает за слово. А что еще может быть?
    for slovo in text:
        if len(slovo) == 1 and slovo.isalnum() == False:
            count_word -= 1
    update.message.reply_text(f'{count_word} слов(а)')


def next_full_moon(update, context):
    '''
    Уровень 2
        Реализуйте в боте команду, которая отвечает на вопрос “Когда ближайшее полнолуние?”
        Например /next_full_moon 2019-01-01
        Чтобы узнать, когда ближайшее полнолуние, используйте ephem.next_full_moon(ДАТА)
    '''
    logging.info('Вызов команды /next_full_moon')
    data = update.message.text.replace('/next_full_moon', '').strip()
    if data == '':
        data = datetime.today()
        data_next_full_moon = ephem.next_full_moon(data)
        update.message.reply_text(data_next_full_moon)
    else:
        try:
            data = datetime.strptime(data, "%Y-%m-%d")
            data_next_full_moon = ephem.next_full_moon(data)
            update.message.reply_text(data_next_full_moon)
        except:
            update.message.reply_text("Вы ввели не коректный формат! Необходимо ввобдить в формате '/next_full_moon 2019-01-01'")

def Bot_reply_city(city, id):
    symbol = city[-1].lower()

    if symbol.lower() in ('ь','ъ','ы'): # на эти буквы городов нет
        symbol = city[-2]

    symbol_2 = symbol #второй символ для И=Й или Е=Ё

    if symbol.lower() == 'и':
        symbol_2 = 'й'

    if symbol.lower() == 'е':
        symbol_2 = 'ё'

    list_symbol_city = []
    for town in dict_id_city[id]: # Создаем список городов начинающихся на последную букву города пользователя
        if town[0].lower() == symbol or town[0].lower() == symbol_2:
            list_symbol_city.append(town)
    town_bot = random.choice(list_symbol_city) # выбор Бота
    return(town_bot)

def del_city_list(city, id):
    temp_list = dict_id_city[id]
    for item_city in temp_list:
        if city.lower() == item_city.lower():
            city = item_city
    # print(len(temp_list),' temp_list = ', temp_list[0:10])
    # print('delcity',city)
    temp_list.remove(city)
    # print(len(temp_list),' temp_list = ', temp_list[0:10])
    return temp_list

def corret_write_city(city,listCity):
    for item in listCity:
        if item.lower() == city.lower():
            return True

def corret_fist_end_symbol(word_user, word_bot):
    if word_bot[-1] in ('ь','ъ','ы'): # на эти буквы городов нет
        if word_user[0].lower() == word_bot[-2].lower():
            return True

    if word_bot[-1] in ('и','й'): # на эти буквы равны
        if word_user[0].lower() in ('и','й'):
            return True

    if word_bot[-1] in ('е', 'ё'): # на эти буквы равны
        if word_user[0].lower() in ('е', 'ё'):
            return True

    if word_user[0].lower() == word_bot[-1].lower():
        return True

def first_symbol(word_bot):
    if word_bot[-1] in ('ь','ъ','ы'): # на эти буквы городов нет
        return word_bot[-2]

    if word_bot[-1] in ('и','й'): # на эти буквы равны
        return ('"и" или "й"')

    if word_bot[-1] in ('е', 'ё'): # на эти буквы равны
        return ('"е" или "ё"')

    return word_bot[-1]

dict_id_city = {}
city_bot = ''

def game_city(update,context):
    '''
    Уровень 3
        Научите бота играть в города.
        Правила такие:
        - внутри бота есть список городов,
        - пользователь пишет /cities Москва и если в списке такой город есть, бот отвечает городом на букву "а" - "Альметьевск, ваш ход".
        Оба города должны удаляться из списка.
        Помните, с ботом могут играть несколько пользователей одновременно
    '''
    logging.info('Вызов команды /cities')
    if len(update.message.text.split()) == 1: # При вводе просто команды /cities выводим правила игры.
        update.message.reply_text(f'ПАВИЛА ИГРЫ В ГОРОДА:\nБуква И = Й, Е = Ё.\nЕсли город закачиватеься на "ь","ъ","ы" тогда город должен начинаться на 2 букву с конца.\n Команда: "/cities restart" запускает игру заного!\nНачать играть: "/cities Название_Города" например: "/cities Москва".')
        return
    global city_bot
    city = update.message.text.split()[1].strip()
    id = update.message.chat.id
    print(city)
    print(dict_id_city.keys())

    if city.lower() == 'restart':
        try:
            del dict_id_city[update.message.chat.id]
            update.message.reply_text(f'Restart! Ваш ход...')
            return
        except KeyError:
            update.message.reply_text(f'Restart? Вы еще даже не начали играть). Ваш ход...')
            return

    if dict_id_city.get(id) != None:
        print('слов в словаре: ',len(dict_id_city.get(id)))
        if corret_fist_end_symbol(city, city_bot): #ERRO Нет проверки что город пользователя начинается на последню букву Бота!!!
            correct_city = corret_write_city(city,dict_id_city.get(id))
            if correct_city:
                # print('В списке городов =', len(dict_id_city[id]))
                dict_id_city[id] = del_city_list(city, id) # Убираем город пользователя
                # print('Убираем город пользователя', city)
                # print('В списке городов =', len(dict_id_city[id]))

                city_bot = Bot_reply_city(city, id) # Выбор Бота
                # print('Выбор Бота', city_bot)

                # print('В списке городов =', len(dict_id_city[id]))
                dict_id_city[id] = del_city_list(city_bot, id) # Убираем город Бота
                # print('Убираем город Бота', city_bot)
                # print('В списке городов =', len(dict_id_city[id]))

                update.message.reply_text(f'{city_bot}, ваш ход') # Отвечаем пользователю
                # print('Отвечаем пользователю!')
                return
            else:
                update.message.reply_text('Такого города нет, попробуйте еще раз!')
                return
        else:
            end_symbol_bot = first_symbol(city_bot)
            update.message.reply_text(f'Город должен начинаться с буквы: {end_symbol_bot}')
            return

    if dict_id_city.get(id) == None:
        update.message.reply_text(f'Повторить ПАВИЛА ИГРЫ В ГОРОДА никогда не лишне:\nБуква И = Й, Е = Ё.\nЕсли город закачиватеься на "ь","ъ","ы" тогда город должен начинаться на 2 букву с конца.\n Команда: "/cities restart" запускает игру заного!\nНачать играть: "/cities Название_Города" например: "/cities Москва".')
        correct_city = corret_write_city(city,list_city)
        if correct_city: #ERRO если название из нескольких слов!!! /cities Ростов-на-дону
            # print('Creat user and dict citys')
            #создаем список городов для пользователя по его id и сразу убираем город пользователя
            citys = list_city.copy()
            # citys.remove(city.capitalize())
            dict_id_city[id] = citys
            # print('слов в словаре: ',len(dict_id_city.get(id)))
            dict_id_city[id] = del_city_list(city, id) # Убираем город пользователя
            # print('Убираем город пользователя, слов в словаре: ',len(dict_id_city.get(id)))

            city_bot = Bot_reply_city(city, id) # Выбор Бота
            # print('Bot city =', city_bot)

            dict_id_city[id] = del_city_list(city_bot, id) # Убираем город Бота
            # print('del city is dict', city_bot)
            # print('Убираем город Бота, слов в словаре: ',len(dict_id_city.get(id)))

            update.message.reply_text(f'{city_bot}, ваш ход') # Отвечаем пользователю
            # print('reply!')
            return
        else:
            update.message.reply_text('Такого города нет, попробуйте еще раз!')
            return

def who_operator(expression):
    for sign in expression:
        if sign == '-':
            return sign
        elif sign == '+':
            return sign
        elif sign == '/':
            return sign
        elif sign == '*':
            return sign

def result_operator(exp_1, exp_2, operator):
    if operator == '-':
        return int(exp_1) - int(exp_2)
    elif operator == '+':
        return int(exp_1) + int(exp_2)
    elif operator == '/':
        try:
            res = int(exp_1) / int(exp_2)
            return res
        except ZeroDivisionError:
            return 'На ноль делить нельзя!'
    elif operator == '*':
        return int(exp_1) * int(exp_2)

def calc(update,context):
    '''
    Уровень 3
    На команду /calc 2-3, он должен ответить “-1”.
    Не забудьте обработать возможные ошибки во вводе: пробелы, отсутствие чисел, деление на ноль
    Подумайте, как можно сделать поддержку действий с тремя и более числами
    '''
    logging.info('Вызов команды /calc')
    expression = update.message.text.replace('/calc', '').strip()
    operator = who_operator(expression)
    print(operator)
    expression = expression.replace(' ','')
    expression = expression.replace('\n','')
    expression = expression.replace('\t','')
    if operator:
        exp_1, exp_2, *_temp = expression.split(operator)
        print(exp_1, exp_2, _temp)
        if exp_1.isdigit() and exp_2.isdigit():
            result = result_operator(exp_1, exp_2, operator)
            update.message.reply_text(result)
        else:
            update.message.reply_text('Нужно вводить только числа!')
    else:
        update.message.reply_text('Это не математическое выражение!')

def main():
    mybot = Updater(settings.API_KEY) # Создаем бота и передаем ему ключ для авторизации на серверах Telegram
    #mybot = Updater(settings.API_KEY, request_kwargs = PROXY) # Создаем бота и передаем ему ключ для авторизации на серверах Telegram + Proxy

    dp = mybot.dispatcher #Диспечер
    dp.add_handler(CommandHandler('start', greet_user)) # Добавил к диспечеру обработчик команд, который реагирует на команду /start и вызывает функц. greet_user
    dp.add_handler(CommandHandler('planet', planet_in_the_constellation)) # Добавил к диспечеру обработчик команд ...
    dp.add_handler(CommandHandler('wordcount', wordcount)) # Добавил к диспечеру обработчик команд ...
    dp.add_handler(CommandHandler('next_full_moon', next_full_moon)) # Добавил к диспечеру обработчик команд ...
    dp.add_handler(CommandHandler('cities', game_city)) # Добавил к диспечеру обработчик команд ...
    dp.add_handler(CommandHandler('calc', calc)) # Добавил к диспечеру обработчик команд ...
    dp.add_handler(MessageHandler(Filters.text, talk_to_me)) # Добавил к диспечеру обработчик команд, укажем, что мы хотим реагировать только на текстовые сообщения

    logging.info('Start Learn_Python01_Mega_Bot')
    mybot.start_polling() # Командуем боту начать ходить в Telegram за сообщениями
    mybot.idle() # Запускаем бота, он будет работать, пока мы его не остановим принудительно

if __name__ == '__main__':
    main()
